package com.github.victorrentea.livecoding.lombok

import com.intellij.codeInspection.ProblemDescriptor
import com.intellij.openapi.application.ApplicationManager
import com.intellij.openapi.command.WriteCommandAction
import com.intellij.openapi.diagnostic.logger
import com.intellij.openapi.project.Project
import com.intellij.psi.*
import com.intellij.psi.codeStyle.JavaCodeStyleManager
import com.intellij.psi.util.PsiTreeUtil
import com.siyeh.ig.BaseInspectionVisitor
import com.siyeh.ig.InspectionGadgetsFix


class ReplaceWithSlf4jInspection : AbstractLombokJavaInspectionBase() {
    companion object {
        val log = logger<ReplaceWithSlf4jInspection>()
        const val INSPECTION_NAME = "Logger declaration can be generated by Lombok"
        const val FIX_NAME = "Replace with @Slf4j (lombok)"
    }

    override fun buildErrorString(vararg infos: Any?) = INSPECTION_NAME

    override fun buildVisitor() = ReplaceWithSlf4jVisitor()

    class ReplaceWithSlf4jVisitor : BaseInspectionVisitor() {
        override fun visitElement(field: PsiElement) {
            super.visitElement(field)
            if (field !is PsiField) return
            if (field.name != "log") return
            if (!field.hasModifierProperty(PsiModifier.STATIC)) return
            if (!field.hasModifierProperty(PsiModifier.FINAL)) return
            if (!field.type.equalsToText("org.slf4j.Logger")) return
            val assignedToExpr = field.initializer as? PsiMethodCallExpression ?: return
            val psiMethod = assignedToExpr.methodExpression.resolve() as? PsiMethod ?: return
            if (psiMethod.name != "getLogger") return
            if (psiMethod.containingClass?.qualifiedName != "org.slf4j.LoggerFactory") return
            val argument = assignedToExpr.argumentList.expressions.singleOrNull() as? PsiClassObjectAccessExpression ?: return
            if (!argument.operand.type.equalsToText(field.containingClass?.qualifiedName?:"/")) return

            registerFieldError(field)
        }
    }

    override fun buildFix(vararg infos: Any?) = ReplaceWithSlf4jFix()

    class ReplaceWithSlf4jFix : InspectionGadgetsFix() {
        override fun getFamilyName() = FIX_NAME

        override fun doFix(project: Project?, descriptor: ProblemDescriptor?) {
            val psiField = PsiTreeUtil.getParentOfType(descriptor?.psiElement, PsiField::class.java) ?: return
            val parentClass = PsiTreeUtil.getParentOfType(psiField, PsiClass::class.java) ?: return
            val modifiers = parentClass.modifierList ?: return

            ApplicationManager.getApplication().invokeLater {
                WriteCommandAction.runWriteCommandAction(project, FIX_NAME, "Live-Coding", {
                    val annotation = modifiers.addAnnotation("lombok.extern.slf4j.Slf4j")
                    JavaCodeStyleManager.getInstance(project).shortenClassReferences(annotation)

                    psiField.delete()
                })
            }
        }

    }
}



